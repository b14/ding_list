<?php
/**
 * @file
 * Basic ding_list module
 */

// Core defined types of lists
define('DING_LIST_TYPE_USER_LIST', 'user_list');    // Manual user lists
define('DING_LIST_TYPE_FOLLOW', 'follow');          // Followed taxonomy terms
define('DING_LIST_TYPE_SEARCHES', 'user_searches'); // Search strings
define('DING_LIST_TYPE_LOAN_HISTORY', 'user_loan_history'); // Loan history
define('DING_LIST_TYPE_BOOKS_READ', 'books_read');  // Read books. This is hardcoded intentionally and exceptionally.
define('DING_LIST_TYPE_REMEMBER', 'remember');      // Check list. This is hardcoded intentionally and exceptionally.
// Extend here with care

define('DING_LIST_OPERATION_DELETE', 'delete');
define('DING_LIST_OPERATION_ATTACH', 'attach');
define('DING_LIST_OPERATION_ATTACH_TING_OBJECT', 'attach_ting_object');
define('DING_LIST_OPERATION_DETACH', 'detach');
define('DING_LIST_OPERATION_SORT', 'sort');
define('DING_LIST_OPERATION_AUTO_CREATE', 'auto_create');
// Extend here with care

/**
 * This array works as a matrix, for which operations are permitted on which
 * list.
 */
$GLOBALS['list_operations'] = array(
  DING_LIST_TYPE_USER_LIST => array(
    DING_LIST_OPERATION_DELETE,
    DING_LIST_OPERATION_ATTACH,
    DING_LIST_OPERATION_DETACH,
    DING_LIST_OPERATION_SORT,
    DING_LIST_OPERATION_ATTACH_TING_OBJECT,
  ),
  DING_LIST_TYPE_FOLLOW => array(
    DING_LIST_OPERATION_ATTACH,
    DING_LIST_OPERATION_DETACH,
    DING_LIST_OPERATION_SORT,
    DING_LIST_OPERATION_AUTO_CREATE,
    '_data' => array(
      'default_title' => t('Emner jeg følger')
    ),
  ),
  DING_LIST_TYPE_LOAN_HISTORY => array(
    DING_LIST_OPERATION_DETACH,
    DING_LIST_OPERATION_AUTO_CREATE,
    '_data' => array(
      'default_title' => t('Lånehistorik')
    ),
  ),
  DING_LIST_TYPE_BOOKS_READ => array(
    DING_LIST_OPERATION_AUTO_CREATE,
    DING_LIST_OPERATION_SORT,
    '_data' => array(
      'default_title' => t('Bøger jeg har læst')
    ),
    DING_LIST_OPERATION_ATTACH_TING_OBJECT,
  ),
  DING_LIST_TYPE_REMEMBER => array(
    DING_LIST_OPERATION_AUTO_CREATE,
    '_data' => array(
      'default_title' => t('Min huskeliste')
    ),
    DING_LIST_OPERATION_ATTACH_TING_OBJECT,
  )
);

//
// Include seperate hook files
//

$current_dir = dirname(__FILE__);
require_once $current_dir . '/theme/theme.inc';
require_once $current_dir . '/hook/block.inc';
require_once $current_dir . '/hook/menu.inc';
require_once $current_dir . '/include/form.inc';
require_once $current_dir . '/include/functions.inc';

/**
 * Implements hook_ctools_plugin_directory().
 */
function ding_list_ctools_plugin_directory($owner, $plugin_type) {
  if ($owner == 'ctools') {
    if ($plugin_type == 'access') {
      return 'plugins/access';
    }
  }
}

/**
 * Implements hook_user_login().
 *
 * Synchronize with openlist, create missing lists and update the historical
 * loans list.
 */
function ding_list_user_login(&$edit, $account) {
  if (module_exists('ting_openlist')) {
    if (ting_openlist_current_user_identifier() === FALSE) {
      ting_openlist_user_login($edit, $account);
    }
    // Synchronize with openlist
    ding_list_sync_openlist();
  }
    
  // Create any missing autocreated lists.
  ding_list_setup_autocreated();
  
  // Update the historical loans.
  ding_list_update_historical_loans();
}

/**
 * Implements hook_action_button_list.
 *
 * Adds the 'Tilføj til liste', to elements that can be added.
 * Adds the 'Slet liste', to deletable lists.
 */
function ding_list_action_button_list($context) {
  $options = array();
  global $user, $list_operations;

  if ($user->uid == 0) {
    // Default options for anonymous users
    return;
  }

  switch ($context['type']) {
    case "TingEntity":
    case "search_result":
      $lists = ding_list_get_lists(ding_list_get_list_types_by_operations(DING_LIST_OPERATION_ATTACH_TING_OBJECT), $user);
      if ($lists !== FALSE) {
        foreach ($lists as $id => $list) {
          if ($element = ding_list_has_ding_list_element($list, 'ting_object', $context['id'])) {
            $options["list_$id"] = array(
              '#theme' => 'link',
              '#text' => t('Remove from @name', array('@name' => $list->title)),
              '#callback' => format_string('dinglist/detach/@id/@remove', array('@id' => $id, '@remove' => $element->id)),
            );
          }
          else {
            $options["list_$id"] = array(
              '#theme' => 'link',
              '#text' => t('Add to @name', array('@name' => $list->title)),
              '#callback' => format_string('dinglist/attach/ting_object/@id/@obj', array('@id' => $id, '@obj' => $context['id'])),
            );
          }
        }
      }
      $options["list"] = array(
        '#theme' => 'link',
        '#text' => t('Tilføj til en ny liste'),
        '#path' => 'user/create-list',
        '#options' => array('query' => array('ting' => $context['id']))
      );
   
      if (isset($context['parent_list'])) {
        $list = $context['parent_list'];
        // Make sure the list has detaching allowed
        // And make sure the list has the list_element needed.
        if (ding_list_allowed($list, DING_LIST_OPERATION_DETACH) && $element = ding_list_has_ding_list_element($list, 'ting_object', $context['id'])) {
          $options['list_' . $list->id] = array(
            '#theme' => 'link',
            '#text' => t('Remove from @name', array('@name' => $list->title)),
            '#callback' => format_string('dinglist/detach/@id/@remove', array('@id' => $list->id, '@remove' => $element->id)),
          );
        }
      }

    break;

    case 'ding_list':
      if (!isset($context['group'])) {
        $list = $context['id'];
        if (ding_list_allowed($list, 'delete')) {
          $options['view_list'] = array(
            '#theme' => 'link',
            '#text' => t('View list'),
            '#path' => format_string('user/list/@id', array('@id' => $list->id)),
          );
          $options['edit_list'] = array(
            '#theme' => 'link',
            '#text' => t('Edit list'),
            '#path' => format_string('user/create-list/@id', array('@id' => $list->id)),
          );
          $options['remove_list'] = array(
            '#theme' => 'link',
            '#text' => 'Slet liste',
            '#callback' => format_string('dinglist/delete/@id', array('@id' => $list->id)),
          );
        }
      }
    break;
  }
  return $options;
}

/**
 * Implements hook_entity_property_info_alter().
 */
function ding_list_entity_property_info_alter(&$info) {
  $properties = &$info['user']['properties'];

  $properties['openlist_modified'] = array(
    'label' => t("Openlist modified"), 
    'description' => t("Last openlist sync"), 
    'type' => 'integer', 
    'schema field' => 'openlist_modified',
    'getter callback' => 'entity_property_verbatim_get',
    'setter callback' => 'entity_property_verbatim_set',
  );
}
/**
 * Implements hook_schema_alter().
 */
function ding_list_schema_alter(&$schema) {
  $schema['users']['fields']['openlist_modified'] = array(
    'type' => 'int', 
    'not null' => TRUE, 
    'default' => 0, 
    'description' => 'Last sync with openlist',
  );
}

/**
 * Implements hook_consent_changed().
 */
function ding_list_consent_changed($consent) {
  // If loan_history_store consent has been revoked, remove all lists.
  if (isset($consent['loan_history_store']) && $consent['loan_history_store'] === FALSE) {
    $lists = ding_list_get_lists();
    if (!empty($lists)) {
      foreach ($lists as $id => $list) {
        ding_list_delete_list($id);
      }
    }
    ding_list_setup_autocreated();
    
    drupal_set_message(t("Your personal lists has now been deleted."));
    
  }
}

/**
 * Implements hook_theme().
 *
 */
function ding_list_theme() {
  return array(
    'ding_list_mode_toggler' => array(
      'variables' => array(
        'modes' => array(t('Compact'), t('Expanded')),
        'default' => 'expanded'
      )
    ),
    'ding_list_list'  => array(
      'template' => 'theme/ding-list-list',
      'variables' => array(
        'items' => array(),
        'sortable' => FALSE,
        'toggler' => TRUE
      ),
    ),
  );
}

function ding_list_init() {
  if (request_uri() == '/da/user') {
    // ding_list_setup_autocreated();
  }
}